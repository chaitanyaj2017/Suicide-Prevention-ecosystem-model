/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.LabWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.MedicalRecord.MedicalRecord;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.SuicidePrevention.Event;
import Business.User.UserAccount;
import Business.WorkRequest.WorkRequest;
import Business.WorkRequest.WorkResponse;
import java.awt.CardLayout;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Chaitanya
 */
public class MonitorPatientVitalSignJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MonitorPatientVitalSignJPanel
     */
    private JPanel userProcessContainer;
    private WorkResponse wr;
    private UserAccount account;
    private LabOrganization organization;
    private Enterprise etrp;
    private EcoSystem business;
    private HospitalEnterprise he;
    private int count=0;
    
    public MonitorPatientVitalSignJPanel(JPanel userProcessContainer,WorkResponse wr, UserAccount account, LabOrganization organization, Enterprise etrp, EcoSystem business) {
         initComponents();
        this.userProcessContainer=userProcessContainer;
        this.wr=wr;
        this.account=account;
        this.organization=organization;
        this.etrp=etrp;
        this.business=business; 
        this.he=(HospitalEnterprise) etrp;
        populateVitals();
    }
    public void populateVitals()
    {
        Person person=wr.getPerson();
        Event eve=(Event) wr.getResult()[0];
        int hbp=0,lbp=0,hr=0;
        float dt=0.0f,at=0.0f;
        Random r=new Random();
        if(person.getItr()==1)
        {
        //#TODO simulation of vital signs.
//        if(!person.getPreliminaryCheck())
//        {
        hbp=r.nextInt(120-100)+120;
        lbp=r.nextInt(90-80)+82;
        if(hbp>124 || lbp>85)
            count++;
        hr=r.nextInt(30)+90;
        if(hr>80)
            count++;
        at=(float) (0.01*(r.nextInt(10)+1));
        if(at>0.04)
            count++;
        dt=(float) (0.01*(r.nextInt(10)+1));
        if(dt>0.04)
            count++;
        eve.getSeObj().setVitalSignsFactor(count*3); 
        //Factor 1 assigned;
        }
        
        else
        {
            for(MedicalRecord mr:he.getMedicalRecordDir().getLstMedicalRecord())
            {
                if(mr.getPerson()==wr.getPerson())
                {
                   hbp=mr.getVitalSign().getHighbloodPressure();
                   lbp=mr.getVitalSign().getLowBloodPressure();
                   hr=mr.getVitalSign().getHeartRate();
                   at=mr.getAlcoholResults();
                   dt=mr.getDrugTestResults();
                   break;
                }
            }
            
        if(hbp>124 || lbp>85)
        count++;
        hr=r.nextInt(30)+90;
        if(hr>80)
        count++;
        at=(float) (0.01*(r.nextInt(10)+1));
        if(at>0.04)
        count++;
        dt=(float) (0.01*(r.nextInt(10)+1));
        if(dt>0.04)
        count++;
        eve.getSeObj().setVitalSignsFactor(count*3);
        //Factor 1 assigned;
        
            
           // hbp=r.nextInt(120-100)+100;
           // lbp=r.nextInt(90-80)+80;
           // at=0.02f;
           // dt=0.02f;
            
        }
        
        txtBloodPressure.setText(hbp+" - "+lbp);
        txtHeartRate.setText(String.valueOf(hr));
        txtAlcoholTest.setText(String.valueOf(at));
        txtDrugtest.setText(String.valueOf(dt));
        
        
        //LabOrganization laborg=(LabOrganization) organization;
      //  person.setPreliminaryCheck(true);
        
        //MedicalRecord mr=laborg.getMedicalRecDir().addMedicalRecord();
        //HospitalEnterprise he=(HospitalEnterprise) etrp;
        MedicalRecord mr=he.getMedicalRecordDir().addMedicalRecord();
        mr.getVitalSign().setHighbloodPressure(hbp);
        mr.getVitalSign().setLowBloodPressure(lbp);
        mr.getVitalSign().setHeartRate(hr);
        mr.setAlcoholResults(at);
        mr.setDrugTestResults(dt);
        mr.setPerson(person);
       // JOptionPane.showMessageDialog(null,"Vitals signs have been collected for this patient");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBloodPressure = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        txtDrugtest = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTestResults = new javax.swing.JLabel();
        btnDiagnose = new javax.swing.JButton();
        txtAlcoholTest = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        txtBloodPressure.setEnabled(false);

        txtHeartRate.setEnabled(false);

        txtDrugtest.setEnabled(false);

        jLabel1.setText("BloodPressure:");

        jLabel2.setText("HeartRate:");

        jLabel3.setText("Drugtest:");

        lblTestResults.setText("TestResults");

        btnDiagnose.setText("Diagnose");
        btnDiagnose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiagnoseActionPerformed(evt);
            }
        });

        txtAlcoholTest.setEnabled(false);

        jLabel4.setText("Alcoholtest:");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(lblTestResults)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(88, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtDrugtest)
                        .addComponent(txtHeartRate)
                        .addComponent(txtBloodPressure)
                        .addComponent(txtAlcoholTest, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                    .addComponent(btnDiagnose))
                .addGap(94, 94, 94))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblTestResults)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDrugtest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAlcoholTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDiagnose)
                    .addComponent(btnBack))
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDiagnoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiagnoseActionPerformed
  
        // TODO add your handling code here:
       // WorkResponse workRequest=new WorkResponse();
       if(!wr.getOl().equals(WorkResponse.OperationalLevel.Lab))
       {
           JOptionPane.showMessageDialog(null,"Request is being serviced at "+wr.getOl().name() +" operational level","WARNING",JOptionPane.WARNING_MESSAGE);       
           return;
       }
       if(wr.getReceiver()!=account)
       {
           JOptionPane.showMessageDialog(null,"This request does not belong to this account","WARNING",JOptionPane.WARNING_MESSAGE);
           return;
       }
        DoctorOrganization docOrg=null;
        wr.setSender(account);
       // workRequest.setPerson(person);
        wr.setReceiver(null);
        account.getWorkQueue().getLstWorkRequest().add(wr);
        //wr.setOl(WorkResponse.OperationalLevel.Lab);
        if(wr.getRtype().equals(WorkResponse.RequestType.DrugAbusePrevention))
        {
        etrp.getWorkQueue().getLstWorkRequest().add(wr);
        wr.setOl(WorkResponse.OperationalLevel.Hospital);
        //#TODO logicset request type to suicide or drug related problems.done for now
       // wr.setRtype(WorkRequest.RequestType.SuicidePrevention);
        wr.setStatus("Pending - Sent to Hospital Admin");
        JOptionPane.showMessageDialog(null,"This patient needs to be further evaluated,Request sent to Hospital Enterprise");
        }        
        else
        {
         for(Organization org:etrp.getOrdDir().getLstOrganisation())
         {
             if(org instanceof DoctorOrganization)
             {
                 docOrg=(DoctorOrganization) org;
             }
         }
         if(docOrg!=null)
         {
          docOrg.getWorkQueue().getLstWorkRequest().add(wr);
          wr.setOl(WorkResponse.OperationalLevel.Doctor);
          wr.setStatus("Pending - Sent to Doctor Organization"); 
          JOptionPane.showMessageDialog(null,"This patient is sent to doctor");
         }
         
        }    
     
    }//GEN-LAST:event_btnDiagnoseActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDiagnose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblTestResults;
    private javax.swing.JTextField txtAlcoholTest;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtDrugtest;
    private javax.swing.JTextField txtHeartRate;
    // End of variables declaration//GEN-END:variables
}
