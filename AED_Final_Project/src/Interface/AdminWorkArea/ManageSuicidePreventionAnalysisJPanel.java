/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.AdminWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.SuicideAwarenessEnterprise;
import Business.Person.Person;
import Business.SuicidePrevention.Event;
import Business.User.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Chaitanya
 */
public class ManageSuicidePreventionAnalysisJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuicidePreventionJPanel
     */
    
    private JPanel userProcessContainer;
    private UserAccount ua;
    private Enterprise enterprise;
    private EcoSystem system;
    private SuicideAwarenessEnterprise sae;
    public ManageSuicidePreventionAnalysisJPanel(JPanel userProcessContainer, UserAccount ua, Enterprise enterprise, EcoSystem system) {
      initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ua=ua;
        this.enterprise=enterprise;
        this.system=system;
        populatePersonTable();
        populatePersonChartChoice();
        
    }
    public void populatePersonChartChoice()
    {
        cbChartChoice.removeAllItems();
        cbChartChoice.addItem("Bar Chart");
        cbChartChoice.addItem("Pie Chart");
    }
    public void populatePersonTable()
    {
        sae=(SuicideAwarenessEnterprise) enterprise;
        DefaultTableModel dtm=(DefaultTableModel) tblSuicideEvaluation.getModel();
        dtm.setRowCount(0);
        for(Map.Entry<Person,ArrayList<Event>> va :sae.getReport().getTmSuicideReport().entrySet())
        {
          Object[] row=new Object[2];
          row[0]=va.getKey();
          row[1]=va.getValue().size();
          dtm.addRow(row);
        }
    }
    public void populatePieCharts()
    {
       DefaultPieDataset dt=new DefaultPieDataset();
       // dt.setValue(file,width);
       dt.setValue("One",new Integer(10));
       dt.setValue("Two",new Integer(20));
       dt.setValue("Three",new Integer(30));
       dt.setValue("Four",new Integer(40));
        JFreeChart chart=ChartFactory.createPieChart("Pie Chart",dt,true,true,true);
        PiePlot p=(PiePlot) chart.getPlot();
       // p.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame=new ChartFrame("PieChart", chart);
        frame.setVisible(true);
        frame.setSize(250,300);
    }
    public void populatedBarCharts()
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        dataset.setValue(80,"Marks","Student1");
        dataset.setValue(50,"Marks","Student2");
        dataset.setValue(75,"Marks","Student3");
        dataset.setValue(95,"Marks","Student4");
        JFreeChart chart=ChartFactory.createBarChart("Bar-chart title","x-axis title", "y-axis title", dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p=chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        ChartFrame frame=new ChartFrame("Bar Chart for student",chart);
        frame.setVisible(true);
        frame.setSize(350,250);
                
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSuicideEvaluation = new javax.swing.JTable();
        btnSelectPatient = new javax.swing.JButton();
        cbChartChoice = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnAlerts = new javax.swing.JButton();

        jButton1.setText("Sample Pie Chart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sample Bar Chart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tblSuicideEvaluation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person", "NoOfVisits"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSuicideEvaluation);
        if (tblSuicideEvaluation.getColumnModel().getColumnCount() > 0) {
            tblSuicideEvaluation.getColumnModel().getColumn(0).setResizable(false);
            tblSuicideEvaluation.getColumnModel().getColumn(1).setResizable(false);
        }

        btnSelectPatient.setText("Select Patient");
        btnSelectPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPatientActionPerformed(evt);
            }
        });

        cbChartChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Select Chart:");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAlerts.setText("View Alerts");
        btnAlerts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlertsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnSelectPatient)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAlerts, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                    .addComponent(btnBack)
                    .addComponent(cbChartChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectPatient)
                    .addComponent(btnAlerts))
                .addGap(18, 18, 18)
                .addComponent(cbChartChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addComponent(jButton1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jButton2))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        populatePieCharts();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        populatedBarCharts();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnSelectPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPatientActionPerformed
        // TODO add your handling code here:
        int selectedRow=tblSuicideEvaluation.getSelectedRow();
        if(selectedRow>-1)
        {
            Person person=(Person) tblSuicideEvaluation.getValueAt(selectedRow,0);
            
            if(person!=null)
            {
               // String choice=(String) cbChartChoice.getSelectedItem();
                ArrayList<Event> lstFoundEvent=null;
                
                for(Map.Entry<Person,ArrayList<Event>> va :sae.getReport().getTmSuicideReport().entrySet())
                {
                if(va.getKey()==person)
                {
                lstFoundEvent=va.getValue();
                }
                }
                //Event eve=null;
                if(lstFoundEvent!=null && lstFoundEvent.size()>0)
                {
                    userProcessContainer.add(new ManageSuicidePreventionPersonAnalysisJPanel(userProcessContainer,person, lstFoundEvent));
                ((CardLayout)userProcessContainer.getLayout()).next(userProcessContainer);
                    //TODO 
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a row from table");
        }
    }//GEN-LAST:event_btnSelectPatientActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAlertsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlertsActionPerformed
        // TODO add your handling code here:
        userProcessContainer.add(new ManageAlertsJPanel(userProcessContainer,enterprise));
                ((CardLayout)userProcessContainer.getLayout()).next(userProcessContainer);
        
    }//GEN-LAST:event_btnAlertsActionPerformed
    public void populatePersonDateBarChart(Person p,Event eve)
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        dataset.setValue(eve.getSeObj().getEnvironmentalFactors(),"Marks","Behavioral Factors");
        dataset.setValue(eve.getSeObj().getExternalFactors(),"Marks","External Factors");
        dataset.setValue(eve.getSeObj().getHealthFactors(),"Marks","Health Factors");
        dataset.setValue(eve.getSeObj().getHistoricalFactors(),"Marks","Historical Factor");
        dataset.setValue(eve.getSeObj().getVitalSignsFactor(),"Marks","VitalSigns Factor");
        JFreeChart chart=ChartFactory.createBarChart("Person Suicide Evaluation","Factor", "Severity", dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p1=chart.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.BLACK);
        ChartFrame frame=new ChartFrame("Bar Chart for student",chart);
        frame.setVisible(true);
        frame.setSize(350,250); 
    }
    public void populatePersonDataPieChart(Person p,Event eve)
    {
        DefaultPieDataset dt=new DefaultPieDataset();
       // dt.setValue(file,width);
       dt.setValue("Behavioral Factors",new Integer(eve.getSeObj().getEnvironmentalFactors()));
       dt.setValue("External Factors",new Integer(eve.getSeObj().getExternalFactors()));
       dt.setValue("Health Factors",new Integer(eve.getSeObj().getHealthFactors()));
       dt.setValue("Historical Factors",new Integer(eve.getSeObj().getHistoricalFactors()));
       dt.setValue("VitalSigns Factor",new Integer(eve.getSeObj().getVitalSignsFactor()));
        JFreeChart chart=ChartFactory.createPieChart("Person Suicide Evaluation",dt,true,true,true);
        PiePlot plot=(PiePlot)  chart.getPlot();
        plot.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame=new ChartFrame("PieChart", chart);
        frame.setVisible(true);
        frame.setSize(250,300);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlerts;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSelectPatient;
    private javax.swing.JComboBox<String> cbChartChoice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSuicideEvaluation;
    // End of variables declaration//GEN-END:variables
}
