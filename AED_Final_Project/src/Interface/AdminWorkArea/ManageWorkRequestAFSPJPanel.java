/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.AdminWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.SecurityEnterprise;
import Business.Network.Network;
import Business.Organization.CitizenComplaintOrganization;
import Business.Organization.FamilyCareOrganization;
import Business.Organization.Organization;
import Business.Organization.PoliceDepartmentOrganization;
import Business.Organization.SuicideAwarenessOrganization;
import Business.SuicidePrevention.Event;
import Business.User.UserAccount;
import Business.WorkRequest.WorkRequest;
import Business.WorkRequest.WorkResponse;
import java.awt.CardLayout;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chaitanya
 */
public class ManageWorkRequestAFSPJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageWorkRequestNgoJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount ua;
    private Enterprise enterprise;
    private EcoSystem system;
    public ManageWorkRequestAFSPJPanel(JPanel userProcessContainer, UserAccount ua, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ua=ua;
        this.enterprise=enterprise;
        this.system=system;
        populateWorkRequest();
    }
    public void populateWorkRequest()
    {
        DefaultTableModel dtm=(DefaultTableModel) tblWorkRequest.getModel();
        dtm.setRowCount(0);
        for(WorkRequest wr:enterprise.getWorkQueue().getLstWorkRequest())
        {
            Object[] row=new Object[4];
            row[0]=wr;
            row[1]=wr.getPerson();
            row[2]=wr.getStatus();
            row[3]=wr.getReceiver()==null?"UnAssigned":wr.getReceiver();
            dtm.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));

        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WorkRequestId", "Person", "Status", "Receiver"
            }
        ));
        jScrollPane1.setViewportView(tblWorkRequest);

        btnBack.setBackground(new java.awt.Color(255, 51, 51));
        btnBack.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 16)); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAssign.setBackground(new java.awt.Color(255, 51, 51));
        btnAssign.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 16)); // NOI18N
        btnAssign.setText("Assign");
        btnAssign.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnProcess.setBackground(new java.awt.Color(255, 51, 51));
        btnProcess.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 16)); // NOI18N
        btnProcess.setText("Process");
        btnProcess.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Manage Work Requests - SUICIDE PREVENTION");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1033, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow=tblWorkRequest.getSelectedRow();
        if(selectedRow>-1)
        {
            WorkResponse wr=(WorkResponse) tblWorkRequest.getValueAt(selectedRow,0);
            if(!wr.getOl().equals(WorkResponse.OperationalLevel.SP))
            {
                JOptionPane.showMessageDialog(null,"Request is being serviced at "+wr.getOl().name() +" operational level","WARNING",JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(wr.getReceiver()!=null && wr.getReceiver()!=ua)
            {
                JOptionPane.showMessageDialog(null,"Request is assigned to some other user","WARNING",JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(wr.getReceiver()==ua)
            {

                JOptionPane.showMessageDialog(null,"Request already assigned to current user","WARNING",JOptionPane.WARNING_MESSAGE);
                return;
            }

            wr.setReceiver(ua);
            // wr.setOl(WorkRequest.OperationalLevel.Lab);
            JOptionPane.showMessageDialog(null,"Request id - "+wr.getRequestId()+" has been assigned to you!");
            populateWorkRequest();

        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a request from table","WARNING",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        int selectedRow=tblWorkRequest.getSelectedRow();
        if(selectedRow>-1)
        {
            WorkResponse wr=(WorkResponse) tblWorkRequest.getValueAt(selectedRow,0);
            if(wr!=null)
            {
                
            if(wr.getSrs()!=null)
            {
            changeWorkRequestStatus(wr);
            
            if(wr.getSrs().equals(WorkResponse.SubRequestResults.Waiting))
            {
                JOptionPane.showMessageDialog(null,"Request is pending for results from other departments","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            if(wr.getSrs().equals(WorkResponse.SubRequestResults.Complete))
            {
                
                SuicideAwarenessOrganization SuicideAwaOrg=null;
                for(Organization org:enterprise.getOrdDir().getLstOrganisation())
                {
                    if(org instanceof SuicideAwarenessOrganization)
                    {
                        SuicideAwaOrg=(SuicideAwarenessOrganization) org;
                    }
                }
                if(SuicideAwaOrg!=null)
                {
                    wr.setReceiver(null);
                    wr.setStatus("Pending - sent to Suicide awareness organisation");
                    wr.setOl(WorkRequest.OperationalLevel.SA);
                    SuicideAwaOrg.getWorkQueue().getLstWorkRequest().add(wr);
                    JOptionPane.showMessageDialog(null,"Request sent to Suicide Awareness Organisation");
                    return;
                    //check
                }
                
            }
            }
            if(!wr.getOl().equals(WorkResponse.OperationalLevel.SP))
            {
                JOptionPane.showMessageDialog(null,"Request is being serviced at "+wr.getOl().name() +" operational level","WARNING",JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(wr.getReceiver()!=ua)
            {
                JOptionPane.showMessageDialog(null,"Request is not assigned to current user","WARNING",JOptionPane.WARNING_MESSAGE);
                return;
            }
            

                
                    //#TODO: logic to forward request to respective organisation and police enterprise
                    SecurityEnterprise sec=null;
                    
                   // PoliceDepartmentOrganization policeOrganization=null;
                   CitizenComplaintOrganization citizenComOrg=null;
                    FamilyCareOrganization familyCareOrganization=null;
                    
                    WorkRequest [] wrArray=wr.CreateSubRequest(2);
                    Event eve=(Event) wr.getResult()[0];
                    if(eve==null)
                    {
                        JOptionPane.showMessageDialog(null,"Event does not exist for this person");
                        return;
                    }
                    WorkResponse workReqPolice=(WorkResponse) wrArray[0];
                    WorkResponse workReqfamilyCare=(WorkResponse)wrArray[1];
                    
                   // WorkResponse workReqSaOrg=(WorkResponse)wrArray[2];
                   
                   for(Organization org : enterprise.getOrdDir().getLstOrganisation())
                   {
                       if(org instanceof FamilyCareOrganization)
                       {
                          familyCareOrganization =(FamilyCareOrganization) org;
                       }
                   }
                   if(familyCareOrganization !=null)
                   {
                    workReqfamilyCare.setOl(WorkRequest.OperationalLevel.FamilyCare);
                        workReqfamilyCare.setSender(ua);
                        workReqfamilyCare.setReceiver(null);
                        workReqfamilyCare.getResult()[0]=eve;
                        workReqfamilyCare.setRtype(WorkRequest.RequestType.SuicidePrevention);
                        familyCareOrganization.getWorkQueue().getLstWorkRequest().add(workReqfamilyCare);
                        workReqfamilyCare.setPerson(wr.getPerson());
                        workReqfamilyCare.setStatus("Pending - Sent to Family care organization");
                      //  JOptionPane.showMessageDialog(null,"Request sent to family care organization");
//                try {
//                    Thread.sleep(2000);
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(ManageWorkRequestAFSPJPanel.class.getName()).log(Level.SEVERE, null, ex);
//                }
                   }
                    for(Network net :system.getNetworkDir().getLstNetwork())
                    {
                        for(Enterprise etr:net.getEnterpriseDir().getLstEnterprises())
                        {
                          //  if(etr.getEt().equals(Enterprise.ErpType.Security) && sec==null)
                            if(etr instanceof SecurityEnterprise)
                            {
                                sec=(SecurityEnterprise) etr;
                                break;
                            }
                            
                        }
                        if(sec!=null )
                        {
                            break;
                        }
                        
                    }
                    if(sec!=null)
                    {
                        for(Organization org:sec.getOrdDir().getLstOrganisation())
                        {
                            if(org instanceof CitizenComplaintOrganization)
                            {
                                citizenComOrg=(CitizenComplaintOrganization) org;
                            }
                        }
                        if(citizenComOrg!=null)
                        {
                        workReqPolice.setOl(WorkRequest.OperationalLevel.CitizenCompliant);
                        workReqPolice.setSender(ua);
                        workReqPolice.setReceiver(null);
                        workReqPolice.getResult()[0]=eve;
                        workReqPolice.setRtype(WorkRequest.RequestType.SuicidePrevention);
                        citizenComOrg.getWorkQueue().getLstWorkRequest().add(workReqPolice);
                        workReqPolice.setPerson(wr.getPerson());
                        workReqPolice.setStatus("Pending - Sent to Police Compliant department ");
                        //JOptionPane.showMessageDialog(null,"Request sent to police organization");
                        }
                    }
                    
                    
                    wr.setSrs(WorkRequest.SubRequestResults.Waiting);
                    JOptionPane.showMessageDialog(null,"Request sent to Police and familyCare organizations");
                    //selection check
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a row from table","WARNING",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkRequest;
    // End of variables declaration//GEN-END:variables

    private void changeWorkRequestStatus(WorkResponse wr) {
        boolean flag=false;
        
      if(wr.getWorkReqArray()!=null)
      {
        for(WorkRequest wres:wr.getWorkReqArray())
        {
         if(wres.isIsComplete())
         {
             flag=true;
         }
         else
         {
             flag=false;
             break;
         }
        }
        if(flag)
        wr.setSrs(WorkRequest.SubRequestResults.Complete);
      }
    }
}
