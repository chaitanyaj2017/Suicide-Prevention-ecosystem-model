/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.AdminWorkArea;

import Business.Person.Person;
import Business.SuicidePrevention.Event;
import java.awt.CardLayout;
import java.awt.Color;
import static java.awt.Component.TOP_ALIGNMENT;
import java.util.ArrayList;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Chaitanya
 */
public class ManageSuicidePreventionPersonAnalysisJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuicidePreventionPersonAnalysisJPanel
     */
    
    private ArrayList<Event> lstEvent;
    private JPanel userProcessContainer;
    private Person person;

    public ManageSuicidePreventionPersonAnalysisJPanel(JPanel userProcessContainer, Person person, ArrayList<Event> lstFoundEvent) {
       initComponents();
       this.lstEvent=lstFoundEvent;
       this.userProcessContainer=userProcessContainer;
       this.person=person;
       populateEventChoice();
       populatePersonChartChoice();
    }
    public void populatePersonChartChoice()
    {
        cbChartChoice.removeAllItems();
        cbChartChoice.addItem("Bar Chart");
        cbChartChoice.addItem("Pie Chart");
    }
    public void populateEventChoice()
    {
        cbEvent.removeAllItems();
        for(Event eve:lstEvent)
        {
            cbEvent.addItem(eve);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbChartChoice = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbEvent = new javax.swing.JComboBox();
        btnViewDataperEvent = new javax.swing.JButton();
        btnThreatIndex = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jLabel1.setText("Select Chart:");

        cbChartChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Select Event:");

        cbEvent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEventActionPerformed(evt);
            }
        });

        btnViewDataperEvent.setText("View data per event");
        btnViewDataperEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDataperEventActionPerformed(evt);
            }
        });

        btnThreatIndex.setText("View Threat Index");
        btnThreatIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThreatIndexActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbEvent, 0, 191, Short.MAX_VALUE)
                            .addComponent(cbChartChoice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnThreatIndex, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewDataperEvent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbChartChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(28, 28, 28)
                .addComponent(btnViewDataperEvent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThreatIndex)
                    .addComponent(btnBack))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEventActionPerformed

    private void btnViewDataperEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDataperEventActionPerformed
        // TODO add your handling code here:
        String choice=(String) cbChartChoice.getSelectedItem();
        Event eve=(Event) cbEvent.getSelectedItem();
                if(choice.equalsIgnoreCase("Bar Chart"))
                {
                    populatePersonDateBarChart(eve);
                }
                else
                {
                    populatePersonDataPieChart(eve);
                }
        
    }//GEN-LAST:event_btnViewDataperEventActionPerformed

    private void btnThreatIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThreatIndexActionPerformed
        // TODO add your handling code here:
        String choice=(String) cbChartChoice.getSelectedItem();
        if(choice.equalsIgnoreCase("Bar Chart"))
                {
                    populatePersonDateBarChart(lstEvent);
                }
                else
                {
                    populatePersonDataPieChart(lstEvent);
                }
    }//GEN-LAST:event_btnThreatIndexActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed

public void populatePersonDateBarChart(ArrayList<Event> lstOfEvent)
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        for(Event e1:lstOfEvent)
        {
        dataset.setValue(e1.getSeObj().getSuicideThreatIndex(),"Suicide Threat Index","Event - "+e1);
//        dataset.setValue(e1.getSeObj().getSuicideThreatIndex(),"Marks","External Factors");
//        dataset.setValue(e1.getSeObj().getSuicideThreatIndex(),"Marks","Health Factors");
//        dataset.setValue(e1.getSeObj().getSuicideThreatIndex(),"Marks","Historical Factor");
//        dataset.setValue(e1.getSeObj().getSuicideThreatIndex(),"Marks","VitalSigns Factor");
        }
        JFreeChart chart=ChartFactory.createBarChart("Person Suicide Evaluation","Factor", "Severity", dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p1=chart.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.BLACK);
        ChartFrame frame=new ChartFrame("Bar Chart for student",chart);
        frame.setVisible(true);
        frame.setSize(350,250); 
    }
    public void populatePersonDateBarChart(Event eve)
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        dataset.setValue(eve.getSeObj().getEnvironmentalFactors(),"Marks","Behavioral Factors");
        dataset.setValue(eve.getSeObj().getExternalFactors(),"Marks","External Factors");
        dataset.setValue(eve.getSeObj().getHealthFactors(),"Marks","Health Factors");
        dataset.setValue(eve.getSeObj().getHistoricalFactors(),"Marks","Historical Factor");
        dataset.setValue(eve.getSeObj().getVitalSignsFactor(),"Marks","VitalSigns Factor");
        JFreeChart chart=ChartFactory.createBarChart("Person Suicide Evaluation","Factor", "Severity", dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p1=chart.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.BLACK);
        ChartFrame frame=new ChartFrame("Bar Chart for student",chart);
        frame.setVisible(true);
        frame.setSize(350,250); 
    }

public void populatePersonDataPieChart(ArrayList<Event> lstOfEvent)
    {
        DefaultPieDataset dt=new DefaultPieDataset();
       // dt.setValue(file,width);
       for(Event e1:lstOfEvent)
       {
       dt.setValue("EventId - "+e1,new Integer(e1.getSeObj().getSuicideThreatIndex()));
//       dt.setValue("External Factors",new Integer(eve.getSeObj().getExternalFactors()));
//       dt.setValue("Health Factors",new Integer(eve.getSeObj().getHealthFactors()));
//       dt.setValue("Historical Factors",new Integer(eve.getSeObj().getHistoricalFactors()));
//       dt.setValue("VitalSigns Factor",new Integer(eve.getSeObj().getVitalSignsFactor()));
       }
        JFreeChart chart=ChartFactory.createPieChart("Person Suicide Evaluation",dt,true,true,true);
       // PiePlot plot=(PiePlot)  chart.getPlot();
        //plot.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame=new ChartFrame("PieChart", chart);
        frame.setVisible(true);
        frame.setSize(250,300);
    }
public void populatePersonDataPieChart(Event eve)
    {
//       DefaultPieDataset dt=new DefaultPieDataset();
//       // dt.setValue(file,width);
//       dt.setValue("One",new Integer(10));
//       dt.setValue("Two",new Integer(20));
//       dt.setValue("Three",new Integer(30));
//       dt.setValue("Four",new Integer(40));
//        JFreeChart chart=ChartFactory.createPieChart("Pie Chart",dt,true,true,true);
//        PiePlot p=(PiePlot) chart.getPlot();
//       // p.setForegroundAlpha(TOP_ALIGNMENT);
//        ChartFrame frame=new ChartFrame("PieChart", chart);
//        frame.setVisible(true);
//        frame.setSize(250,300);
        
        //
         DefaultPieDataset dt1=new DefaultPieDataset();
         dt1.setValue("Behavioral",new Integer(eve.getSeObj().getHistoricalFactors()));
         dt1.setValue("Health",new Integer(eve.getSeObj().getHealthFactors()));
         dt1.setValue("VitalSign",new Integer(eve.getSeObj().getVitalSignsFactor()));
         dt1.setValue("Historical",new Integer(eve.getSeObj().getHistoricalFactors()));
         dt1.setValue("External",new Integer(eve.getSeObj().getExternalFactors()));
         JFreeChart chart1=ChartFactory.createPieChart("Suicide threat evaluation",dt1,true,true,true);
        PiePlot p1=(PiePlot) chart1.getPlot();
        ChartFrame fr=new ChartFrame("Suicide threat Evaluation", chart1);
        fr.setVisible(true);
        fr.setSize(350,450);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnThreatIndex;
    private javax.swing.JButton btnViewDataperEvent;
    private javax.swing.JComboBox<String> cbChartChoice;
    private javax.swing.JComboBox cbEvent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
